// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<MenuTrigger /> snapshot should match snapshot 1`] = `
<MenuTrigger
  aria-label="Menu Trigger Component "
>
  <div
    className="md-menu-trigger-wrapper"
    onKeyDown={[Function]}
  >
    <ButtonPill
      aria-controls={null}
      aria-expanded={false}
      aria-haspopup={true}
      id="test-ID"
      key=".$1"
      onKeyDown={[Function]}
      onPress={[Function]}
      onPressStart={[Function]}
    >
      <ButtonSimple
        aria-controls={null}
        aria-expanded={false}
        aria-haspopup={true}
        className="md-button-pill-wrapper"
        data-color="primary"
        data-disabled={false}
        data-ghost={false}
        data-grown={false}
        data-outline={false}
        data-size={40}
        data-solid={false}
        id="test-ID"
        onKeyDown={[Function]}
        onPress={[Function]}
        onPressStart={[Function]}
      >
        <FocusRing>
          <FocusRing
            focusClass="md-focus-ring-wrapper children"
            focusRingClass="md-focus-ring-wrapper children"
          >
            <button
              aria-controls={null}
              aria-expanded={false}
              aria-haspopup={true}
              className="md-button-pill-wrapper"
              data-color="primary"
              data-disabled={false}
              data-ghost={false}
              data-grown={false}
              data-outline={false}
              data-size={40}
              data-solid={false}
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              type="button"
            >
              Hello world
            </button>
          </FocusRing>
        </FocusRing>
      </ButtonSimple>
    </ButtonPill>
  </div>
</MenuTrigger>
`;

exports[`<MenuTrigger /> snapshot should match snapshot correctly when closeOnSelect is false 1`] = `
<MenuTrigger
  aria-label="Menu Trigger Component "
  closeOnSelect={false}
>
  <div
    className="md-menu-trigger-wrapper"
    onKeyDown={[Function]}
  >
    <ButtonPill
      aria-controls={null}
      aria-expanded={false}
      aria-haspopup={true}
      id="test-ID"
      key=".$1"
      onKeyDown={[Function]}
      onPress={[Function]}
      onPressStart={[Function]}
    >
      <ButtonSimple
        aria-controls={null}
        aria-expanded={false}
        aria-haspopup={true}
        className="md-button-pill-wrapper"
        data-color="primary"
        data-disabled={false}
        data-ghost={false}
        data-grown={false}
        data-outline={false}
        data-size={40}
        data-solid={false}
        id="test-ID"
        onKeyDown={[Function]}
        onPress={[Function]}
        onPressStart={[Function]}
      >
        <FocusRing>
          <FocusRing
            focusClass="md-focus-ring-wrapper children"
            focusRingClass="md-focus-ring-wrapper children"
          >
            <button
              aria-controls={null}
              aria-expanded={false}
              aria-haspopup={true}
              className="md-button-pill-wrapper"
              data-color="primary"
              data-disabled={false}
              data-ghost={false}
              data-grown={false}
              data-outline={false}
              data-size={40}
              data-solid={false}
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              type="button"
            >
              Hello world
            </button>
          </FocusRing>
        </FocusRing>
      </ButtonSimple>
    </ButtonPill>
  </div>
</MenuTrigger>
`;

exports[`<MenuTrigger /> snapshot should match snapshot correctly when closeOnSelect is false 2`] = `
<MenuTrigger
  aria-label="Menu Trigger Component "
  closeOnSelect={false}
>
  <div
    className="md-menu-trigger-wrapper"
    onKeyDown={[Function]}
  >
    <ButtonPill
      aria-controls="test-ID"
      aria-expanded={true}
      aria-haspopup={true}
      id="test-ID"
      key=".$1"
      onKeyDown={[Function]}
      onPress={[Function]}
      onPressStart={[Function]}
    >
      <ButtonSimple
        aria-controls="test-ID"
        aria-expanded={true}
        aria-haspopup={true}
        className="md-button-pill-wrapper"
        data-color="primary"
        data-disabled={false}
        data-ghost={false}
        data-grown={false}
        data-outline={false}
        data-size={40}
        data-solid={false}
        id="test-ID"
        onKeyDown={[Function]}
        onPress={[Function]}
        onPressStart={[Function]}
      >
        <FocusRing>
          <FocusRing
            focusClass="md-focus-ring-wrapper children"
            focusRingClass="md-focus-ring-wrapper children"
          >
            <button
              aria-controls="test-ID"
              aria-expanded={true}
              aria-haspopup={true}
              className="md-button-pill-wrapper"
              data-color="primary"
              data-disabled={false}
              data-ghost={false}
              data-grown={false}
              data-outline={false}
              data-size={40}
              data-solid={false}
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              type="button"
            >
              Hello world
            </button>
          </FocusRing>
        </FocusRing>
      </ButtonSimple>
    </ButtonPill>
    <FocusScope
      contain={true}
      restoreFocus={true}
    >
      <span
        data-focus-scope-start={true}
        hidden={true}
      />
      <ModalContainer
        className="md-menu-trigger-overlay"
        color="primary"
        elevation={4}
        isPadded={true}
        onKeyDown={[Function]}
        round={75}
      >
        <div
          className="md-menu-trigger-overlay md-modal-container-wrapper"
          data-color="primary"
          data-elevation={4}
          data-padded={true}
          data-round={75}
          onKeyDown={[Function]}
        >
          <DismissButton
            onDismiss={[Function]}
          >
            <VisuallyHidden>
              <div
                style={
                  Object {
                    "border": 0,
                    "clip": "rect(0 0 0 0)",
                    "clipPath": "inset(50%)",
                    "height": 1,
                    "margin": "0 -1px -1px 0",
                    "overflow": "hidden",
                    "padding": 0,
                    "position": "absolute",
                    "whiteSpace": "nowrap",
                    "width": 1,
                  }
                }
              >
                <button
                  aria-label="Dismiss"
                  onClick={[Function]}
                  tabIndex={-1}
                />
              </div>
            </VisuallyHidden>
          </DismissButton>
          <_Menu
            key=".$2"
            selectionMode="single"
          >
            <ul
              aria-labelledby="test-ID"
              className="md-menu-wrapper"
              id="test-ID"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyDownCapture={[Function]}
              onMouseDown={[Function]}
              role="menu"
              tabIndex={-1}
            >
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 0,
                    "key": "one",
                    "level": 0,
                    "nextKey": "two",
                    "parentKey": null,
                    "prevKey": undefined,
                    "props": Object {
                      "children": "One",
                    },
                    "rendered": "One",
                    "shouldInvalidate": undefined,
                    "textValue": "One",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="one"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "one",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="one"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={0}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="one"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={0}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            One
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 1,
                    "key": "two",
                    "level": 0,
                    "nextKey": "three",
                    "parentKey": null,
                    "prevKey": "one",
                    "props": Object {
                      "children": "Two",
                    },
                    "rendered": "Two",
                    "shouldInvalidate": undefined,
                    "textValue": "Two",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="two"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "one",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="two"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="two"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Two
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 2,
                    "key": "three",
                    "level": 0,
                    "nextKey": undefined,
                    "parentKey": null,
                    "prevKey": "two",
                    "props": Object {
                      "children": "Three",
                    },
                    "rendered": "Three",
                    "shouldInvalidate": undefined,
                    "textValue": "Three",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="three"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "one",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="three"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="three"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Three
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
            </ul>
          </_Menu>
          <ContentSeparator
            key="separator-0"
          >
            <li
              className="md-content-separator-wrapper"
              role="separator"
            />
          </ContentSeparator>
          <_Menu
            key=".$4"
            selectionMode="multiple"
          >
            <ul
              aria-labelledby="test-ID"
              className="md-menu-wrapper"
              id="test-ID"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyDownCapture={[Function]}
              onMouseDown={[Function]}
              role="menu"
              tabIndex={-1}
            >
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 0,
                    "key": "asd",
                    "level": 0,
                    "nextKey": "ff",
                    "parentKey": null,
                    "prevKey": undefined,
                    "props": Object {
                      "children": "Four",
                    },
                    "rendered": "Four",
                    "shouldInvalidate": undefined,
                    "textValue": "Four",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="asd"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "asd",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="asd"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={0}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="asd"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={0}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Four
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 1,
                    "key": "ff",
                    "level": 0,
                    "nextKey": "d",
                    "parentKey": null,
                    "prevKey": "asd",
                    "props": Object {
                      "children": "Five",
                    },
                    "rendered": "Five",
                    "shouldInvalidate": undefined,
                    "textValue": "Five",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="ff"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "asd",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="ff"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="ff"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Five
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 2,
                    "key": "d",
                    "level": 0,
                    "nextKey": undefined,
                    "parentKey": null,
                    "prevKey": "ff",
                    "props": Object {
                      "children": "Six",
                    },
                    "rendered": "Six",
                    "shouldInvalidate": undefined,
                    "textValue": "Six",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="d"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "asd",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="d"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="d"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Six
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
            </ul>
          </_Menu>
          <DismissButton
            onDismiss={[Function]}
          >
            <VisuallyHidden>
              <div
                style={
                  Object {
                    "border": 0,
                    "clip": "rect(0 0 0 0)",
                    "clipPath": "inset(50%)",
                    "height": 1,
                    "margin": "0 -1px -1px 0",
                    "overflow": "hidden",
                    "padding": 0,
                    "position": "absolute",
                    "whiteSpace": "nowrap",
                    "width": 1,
                  }
                }
              >
                <button
                  aria-label="Dismiss"
                  onClick={[Function]}
                  tabIndex={-1}
                />
              </div>
            </VisuallyHidden>
          </DismissButton>
        </div>
      </ModalContainer>
      <span
        data-focus-scope-end={true}
        hidden={true}
      />
    </FocusScope>
  </div>
</MenuTrigger>
`;

exports[`<MenuTrigger /> snapshot should match snapshot correctly when closeOnSelect is false 3`] = `
<MenuTrigger
  aria-label="Menu Trigger Component "
  closeOnSelect={false}
>
  <div
    className="md-menu-trigger-wrapper"
    onKeyDown={[Function]}
  >
    <ButtonPill
      aria-controls="test-ID"
      aria-expanded={true}
      aria-haspopup={true}
      id="test-ID"
      key=".$1"
      onKeyDown={[Function]}
      onPress={[Function]}
      onPressStart={[Function]}
    >
      <ButtonSimple
        aria-controls="test-ID"
        aria-expanded={true}
        aria-haspopup={true}
        className="md-button-pill-wrapper"
        data-color="primary"
        data-disabled={false}
        data-ghost={false}
        data-grown={false}
        data-outline={false}
        data-size={40}
        data-solid={false}
        id="test-ID"
        onKeyDown={[Function]}
        onPress={[Function]}
        onPressStart={[Function]}
      >
        <FocusRing>
          <FocusRing
            focusClass="md-focus-ring-wrapper children"
            focusRingClass="md-focus-ring-wrapper children"
          >
            <button
              aria-controls="test-ID"
              aria-expanded={true}
              aria-haspopup={true}
              className="md-button-pill-wrapper"
              data-color="primary"
              data-disabled={false}
              data-ghost={false}
              data-grown={false}
              data-outline={false}
              data-size={40}
              data-solid={false}
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              type="button"
            >
              Hello world
            </button>
          </FocusRing>
        </FocusRing>
      </ButtonSimple>
    </ButtonPill>
    <FocusScope
      contain={true}
      restoreFocus={true}
    >
      <span
        data-focus-scope-start={true}
        hidden={true}
      />
      <ModalContainer
        className="md-menu-trigger-overlay"
        color="primary"
        elevation={4}
        isPadded={true}
        onKeyDown={[Function]}
        round={75}
      >
        <div
          className="md-menu-trigger-overlay md-modal-container-wrapper"
          data-color="primary"
          data-elevation={4}
          data-padded={true}
          data-round={75}
          onKeyDown={[Function]}
        >
          <DismissButton
            onDismiss={[Function]}
          >
            <VisuallyHidden>
              <div
                style={
                  Object {
                    "border": 0,
                    "clip": "rect(0 0 0 0)",
                    "clipPath": "inset(50%)",
                    "height": 1,
                    "margin": "0 -1px -1px 0",
                    "overflow": "hidden",
                    "padding": 0,
                    "position": "absolute",
                    "whiteSpace": "nowrap",
                    "width": 1,
                  }
                }
              >
                <button
                  aria-label="Dismiss"
                  onClick={[Function]}
                  tabIndex={-1}
                />
              </div>
            </VisuallyHidden>
          </DismissButton>
          <_Menu
            key=".$2"
            selectionMode="single"
          >
            <ul
              aria-labelledby="test-ID"
              className="md-menu-wrapper"
              id="test-ID"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyDownCapture={[Function]}
              onMouseDown={[Function]}
              role="menu"
              tabIndex={-1}
            >
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 0,
                    "key": "one",
                    "level": 0,
                    "nextKey": "two",
                    "parentKey": null,
                    "prevKey": undefined,
                    "props": Object {
                      "children": "One",
                    },
                    "rendered": "One",
                    "shouldInvalidate": undefined,
                    "textValue": "One",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="one"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "one",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="one"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={0}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="one"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={0}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            One
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 1,
                    "key": "two",
                    "level": 0,
                    "nextKey": "three",
                    "parentKey": null,
                    "prevKey": "one",
                    "props": Object {
                      "children": "Two",
                    },
                    "rendered": "Two",
                    "shouldInvalidate": undefined,
                    "textValue": "Two",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="two"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "one",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="two"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="two"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Two
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 2,
                    "key": "three",
                    "level": 0,
                    "nextKey": undefined,
                    "parentKey": null,
                    "prevKey": "two",
                    "props": Object {
                      "children": "Three",
                    },
                    "rendered": "Three",
                    "shouldInvalidate": undefined,
                    "textValue": "Three",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="three"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "one",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="three"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="three"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Three
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
            </ul>
          </_Menu>
          <ContentSeparator
            key="separator-0"
          >
            <li
              className="md-content-separator-wrapper"
              role="separator"
            />
          </ContentSeparator>
          <_Menu
            key=".$4"
            selectionMode="multiple"
          >
            <ul
              aria-labelledby="test-ID"
              className="md-menu-wrapper"
              id="test-ID"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyDownCapture={[Function]}
              onMouseDown={[Function]}
              role="menu"
              tabIndex={-1}
            >
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 0,
                    "key": "asd",
                    "level": 0,
                    "nextKey": "ff",
                    "parentKey": null,
                    "prevKey": undefined,
                    "props": Object {
                      "children": "Four",
                    },
                    "rendered": "Four",
                    "shouldInvalidate": undefined,
                    "textValue": "Four",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="asd"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "asd",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="asd"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={0}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="asd"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={0}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Four
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 1,
                    "key": "ff",
                    "level": 0,
                    "nextKey": "d",
                    "parentKey": null,
                    "prevKey": "asd",
                    "props": Object {
                      "children": "Five",
                    },
                    "rendered": "Five",
                    "shouldInvalidate": undefined,
                    "textValue": "Five",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="ff"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "asd",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="ff"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="ff"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Five
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 2,
                    "key": "d",
                    "level": 0,
                    "nextKey": undefined,
                    "parentKey": null,
                    "prevKey": "ff",
                    "props": Object {
                      "children": "Six",
                    },
                    "rendered": "Six",
                    "shouldInvalidate": undefined,
                    "textValue": "Six",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="d"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "asd",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="d"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="d"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Six
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
            </ul>
          </_Menu>
          <DismissButton
            onDismiss={[Function]}
          >
            <VisuallyHidden>
              <div
                style={
                  Object {
                    "border": 0,
                    "clip": "rect(0 0 0 0)",
                    "clipPath": "inset(50%)",
                    "height": 1,
                    "margin": "0 -1px -1px 0",
                    "overflow": "hidden",
                    "padding": 0,
                    "position": "absolute",
                    "whiteSpace": "nowrap",
                    "width": 1,
                  }
                }
              >
                <button
                  aria-label="Dismiss"
                  onClick={[Function]}
                  tabIndex={-1}
                />
              </div>
            </VisuallyHidden>
          </DismissButton>
        </div>
      </ModalContainer>
      <span
        data-focus-scope-end={true}
        hidden={true}
      />
    </FocusScope>
  </div>
</MenuTrigger>
`;

exports[`<MenuTrigger /> snapshot should match snapshot correctly when closeOnSelect is true 1`] = `
<MenuTrigger
  aria-label="Menu Trigger Component "
>
  <div
    className="md-menu-trigger-wrapper"
    onKeyDown={[Function]}
  >
    <ButtonPill
      aria-controls={null}
      aria-expanded={false}
      aria-haspopup={true}
      id="test-ID"
      key=".$1"
      onKeyDown={[Function]}
      onPress={[Function]}
      onPressStart={[Function]}
    >
      <ButtonSimple
        aria-controls={null}
        aria-expanded={false}
        aria-haspopup={true}
        className="md-button-pill-wrapper"
        data-color="primary"
        data-disabled={false}
        data-ghost={false}
        data-grown={false}
        data-outline={false}
        data-size={40}
        data-solid={false}
        id="test-ID"
        onKeyDown={[Function]}
        onPress={[Function]}
        onPressStart={[Function]}
      >
        <FocusRing>
          <FocusRing
            focusClass="md-focus-ring-wrapper children"
            focusRingClass="md-focus-ring-wrapper children"
          >
            <button
              aria-controls={null}
              aria-expanded={false}
              aria-haspopup={true}
              className="md-button-pill-wrapper"
              data-color="primary"
              data-disabled={false}
              data-ghost={false}
              data-grown={false}
              data-outline={false}
              data-size={40}
              data-solid={false}
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              type="button"
            >
              Hello world
            </button>
          </FocusRing>
        </FocusRing>
      </ButtonSimple>
    </ButtonPill>
  </div>
</MenuTrigger>
`;

exports[`<MenuTrigger /> snapshot should match snapshot correctly when closeOnSelect is true 2`] = `
<MenuTrigger
  aria-label="Menu Trigger Component "
>
  <div
    className="md-menu-trigger-wrapper"
    onKeyDown={[Function]}
  >
    <ButtonPill
      aria-controls="test-ID"
      aria-expanded={true}
      aria-haspopup={true}
      id="test-ID"
      key=".$1"
      onKeyDown={[Function]}
      onPress={[Function]}
      onPressStart={[Function]}
    >
      <ButtonSimple
        aria-controls="test-ID"
        aria-expanded={true}
        aria-haspopup={true}
        className="md-button-pill-wrapper"
        data-color="primary"
        data-disabled={false}
        data-ghost={false}
        data-grown={false}
        data-outline={false}
        data-size={40}
        data-solid={false}
        id="test-ID"
        onKeyDown={[Function]}
        onPress={[Function]}
        onPressStart={[Function]}
      >
        <FocusRing>
          <FocusRing
            focusClass="md-focus-ring-wrapper children"
            focusRingClass="md-focus-ring-wrapper children"
          >
            <button
              aria-controls="test-ID"
              aria-expanded={true}
              aria-haspopup={true}
              className="md-button-pill-wrapper"
              data-color="primary"
              data-disabled={false}
              data-ghost={false}
              data-grown={false}
              data-outline={false}
              data-size={40}
              data-solid={false}
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              type="button"
            >
              Hello world
            </button>
          </FocusRing>
        </FocusRing>
      </ButtonSimple>
    </ButtonPill>
    <FocusScope
      contain={true}
      restoreFocus={true}
    >
      <span
        data-focus-scope-start={true}
        hidden={true}
      />
      <ModalContainer
        className="md-menu-trigger-overlay"
        color="primary"
        elevation={4}
        isPadded={true}
        onKeyDown={[Function]}
        round={75}
      >
        <div
          className="md-menu-trigger-overlay md-modal-container-wrapper"
          data-color="primary"
          data-elevation={4}
          data-padded={true}
          data-round={75}
          onKeyDown={[Function]}
        >
          <DismissButton
            onDismiss={[Function]}
          >
            <VisuallyHidden>
              <div
                style={
                  Object {
                    "border": 0,
                    "clip": "rect(0 0 0 0)",
                    "clipPath": "inset(50%)",
                    "height": 1,
                    "margin": "0 -1px -1px 0",
                    "overflow": "hidden",
                    "padding": 0,
                    "position": "absolute",
                    "whiteSpace": "nowrap",
                    "width": 1,
                  }
                }
              >
                <button
                  aria-label="Dismiss"
                  onClick={[Function]}
                  tabIndex={-1}
                />
              </div>
            </VisuallyHidden>
          </DismissButton>
          <_Menu
            key=".$2"
            selectionMode="single"
          >
            <ul
              aria-labelledby="test-ID"
              className="md-menu-wrapper"
              id="test-ID"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyDownCapture={[Function]}
              onMouseDown={[Function]}
              role="menu"
              tabIndex={-1}
            >
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 0,
                    "key": "one",
                    "level": 0,
                    "nextKey": "two",
                    "parentKey": null,
                    "prevKey": undefined,
                    "props": Object {
                      "children": "One",
                    },
                    "rendered": "One",
                    "shouldInvalidate": undefined,
                    "textValue": "One",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="one"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "one",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="one"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={0}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="one"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={0}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            One
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 1,
                    "key": "two",
                    "level": 0,
                    "nextKey": "three",
                    "parentKey": null,
                    "prevKey": "one",
                    "props": Object {
                      "children": "Two",
                    },
                    "rendered": "Two",
                    "shouldInvalidate": undefined,
                    "textValue": "Two",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="two"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "one",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="two"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="two"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Two
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 2,
                    "key": "three",
                    "level": 0,
                    "nextKey": undefined,
                    "parentKey": null,
                    "prevKey": "two",
                    "props": Object {
                      "children": "Three",
                    },
                    "rendered": "Three",
                    "shouldInvalidate": undefined,
                    "textValue": "Three",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="three"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "one",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="three"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="three"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Three
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
            </ul>
          </_Menu>
          <ContentSeparator
            key="separator-0"
          >
            <li
              className="md-content-separator-wrapper"
              role="separator"
            />
          </ContentSeparator>
          <_Menu
            key=".$4"
            selectionMode="multiple"
          >
            <ul
              aria-labelledby="test-ID"
              className="md-menu-wrapper"
              id="test-ID"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyDownCapture={[Function]}
              onMouseDown={[Function]}
              role="menu"
              tabIndex={-1}
            >
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 0,
                    "key": "asd",
                    "level": 0,
                    "nextKey": "ff",
                    "parentKey": null,
                    "prevKey": undefined,
                    "props": Object {
                      "children": "Four",
                    },
                    "rendered": "Four",
                    "shouldInvalidate": undefined,
                    "textValue": "Four",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="asd"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "asd",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="asd"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={0}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="asd"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={0}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Four
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 1,
                    "key": "ff",
                    "level": 0,
                    "nextKey": "d",
                    "parentKey": null,
                    "prevKey": "asd",
                    "props": Object {
                      "children": "Five",
                    },
                    "rendered": "Five",
                    "shouldInvalidate": undefined,
                    "textValue": "Five",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="ff"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "asd",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="ff"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="ff"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Five
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 2,
                    "key": "d",
                    "level": 0,
                    "nextKey": undefined,
                    "parentKey": null,
                    "prevKey": "ff",
                    "props": Object {
                      "children": "Six",
                    },
                    "rendered": "Six",
                    "shouldInvalidate": undefined,
                    "textValue": "Six",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="d"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "asd",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="d"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="d"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Six
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
            </ul>
          </_Menu>
          <DismissButton
            onDismiss={[Function]}
          >
            <VisuallyHidden>
              <div
                style={
                  Object {
                    "border": 0,
                    "clip": "rect(0 0 0 0)",
                    "clipPath": "inset(50%)",
                    "height": 1,
                    "margin": "0 -1px -1px 0",
                    "overflow": "hidden",
                    "padding": 0,
                    "position": "absolute",
                    "whiteSpace": "nowrap",
                    "width": 1,
                  }
                }
              >
                <button
                  aria-label="Dismiss"
                  onClick={[Function]}
                  tabIndex={-1}
                />
              </div>
            </VisuallyHidden>
          </DismissButton>
        </div>
      </ModalContainer>
      <span
        data-focus-scope-end={true}
        hidden={true}
      />
    </FocusScope>
  </div>
</MenuTrigger>
`;

exports[`<MenuTrigger /> snapshot should match snapshot correctly when closeOnSelect is true 3`] = `
<MenuTrigger
  aria-label="Menu Trigger Component "
>
  <div
    className="md-menu-trigger-wrapper"
    onKeyDown={[Function]}
  >
    <ButtonPill
      aria-controls="test-ID"
      aria-expanded={true}
      aria-haspopup={true}
      id="test-ID"
      key=".$1"
      onKeyDown={[Function]}
      onPress={[Function]}
      onPressStart={[Function]}
    >
      <ButtonSimple
        aria-controls="test-ID"
        aria-expanded={true}
        aria-haspopup={true}
        className="md-button-pill-wrapper"
        data-color="primary"
        data-disabled={false}
        data-ghost={false}
        data-grown={false}
        data-outline={false}
        data-size={40}
        data-solid={false}
        id="test-ID"
        onKeyDown={[Function]}
        onPress={[Function]}
        onPressStart={[Function]}
      >
        <FocusRing>
          <FocusRing
            focusClass="md-focus-ring-wrapper children"
            focusRingClass="md-focus-ring-wrapper children"
          >
            <button
              aria-controls="test-ID"
              aria-expanded={true}
              aria-haspopup={true}
              className="md-button-pill-wrapper"
              data-color="primary"
              data-disabled={false}
              data-ghost={false}
              data-grown={false}
              data-outline={false}
              data-size={40}
              data-solid={false}
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              type="button"
            >
              Hello world
            </button>
          </FocusRing>
        </FocusRing>
      </ButtonSimple>
    </ButtonPill>
    <FocusScope
      contain={true}
      restoreFocus={true}
    >
      <span
        data-focus-scope-start={true}
        hidden={true}
      />
      <ModalContainer
        className="md-menu-trigger-overlay"
        color="primary"
        elevation={4}
        isPadded={true}
        onKeyDown={[Function]}
        round={75}
      >
        <div
          className="md-menu-trigger-overlay md-modal-container-wrapper"
          data-color="primary"
          data-elevation={4}
          data-padded={true}
          data-round={75}
          onKeyDown={[Function]}
        >
          <DismissButton
            onDismiss={[Function]}
          >
            <VisuallyHidden>
              <div
                style={
                  Object {
                    "border": 0,
                    "clip": "rect(0 0 0 0)",
                    "clipPath": "inset(50%)",
                    "height": 1,
                    "margin": "0 -1px -1px 0",
                    "overflow": "hidden",
                    "padding": 0,
                    "position": "absolute",
                    "whiteSpace": "nowrap",
                    "width": 1,
                  }
                }
              >
                <button
                  aria-label="Dismiss"
                  onClick={[Function]}
                  tabIndex={-1}
                />
              </div>
            </VisuallyHidden>
          </DismissButton>
          <_Menu
            key=".$2"
            selectionMode="single"
          >
            <ul
              aria-labelledby="test-ID"
              className="md-menu-wrapper"
              id="test-ID"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyDownCapture={[Function]}
              onMouseDown={[Function]}
              role="menu"
              tabIndex={-1}
            >
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 0,
                    "key": "one",
                    "level": 0,
                    "nextKey": "two",
                    "parentKey": null,
                    "prevKey": undefined,
                    "props": Object {
                      "children": "One",
                    },
                    "rendered": "One",
                    "shouldInvalidate": undefined,
                    "textValue": "One",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="one"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "one",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="one"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={0}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="one"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={0}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            One
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 1,
                    "key": "two",
                    "level": 0,
                    "nextKey": "three",
                    "parentKey": null,
                    "prevKey": "one",
                    "props": Object {
                      "children": "Two",
                    },
                    "rendered": "Two",
                    "shouldInvalidate": undefined,
                    "textValue": "Two",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="two"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "one",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="two"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="two"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Two
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 2,
                    "key": "three",
                    "level": 0,
                    "nextKey": undefined,
                    "parentKey": null,
                    "prevKey": "two",
                    "props": Object {
                      "children": "Three",
                    },
                    "rendered": "Three",
                    "shouldInvalidate": undefined,
                    "textValue": "Three",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="three"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "one",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="three"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="three"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Three
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
            </ul>
          </_Menu>
          <ContentSeparator
            key="separator-0"
          >
            <li
              className="md-content-separator-wrapper"
              role="separator"
            />
          </ContentSeparator>
          <_Menu
            key=".$4"
            selectionMode="multiple"
          >
            <ul
              aria-labelledby="test-ID"
              className="md-menu-wrapper"
              id="test-ID"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyDownCapture={[Function]}
              onMouseDown={[Function]}
              role="menu"
              tabIndex={-1}
            >
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 0,
                    "key": "asd",
                    "level": 0,
                    "nextKey": "ff",
                    "parentKey": null,
                    "prevKey": undefined,
                    "props": Object {
                      "children": "Four",
                    },
                    "rendered": "Four",
                    "shouldInvalidate": undefined,
                    "textValue": "Four",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="asd"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "asd",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="asd"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={0}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="asd"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={0}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Four
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 1,
                    "key": "ff",
                    "level": 0,
                    "nextKey": "d",
                    "parentKey": null,
                    "prevKey": "asd",
                    "props": Object {
                      "children": "Five",
                    },
                    "rendered": "Five",
                    "shouldInvalidate": undefined,
                    "textValue": "Five",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="ff"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "asd",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="ff"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="ff"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Five
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 2,
                    "key": "d",
                    "level": 0,
                    "nextKey": undefined,
                    "parentKey": null,
                    "prevKey": "ff",
                    "props": Object {
                      "children": "Six",
                    },
                    "rendered": "Six",
                    "shouldInvalidate": undefined,
                    "textValue": "Six",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="d"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": "first",
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": "asd",
                        "isFocused": true,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="d"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="d"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Six
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
            </ul>
          </_Menu>
          <DismissButton
            onDismiss={[Function]}
          >
            <VisuallyHidden>
              <div
                style={
                  Object {
                    "border": 0,
                    "clip": "rect(0 0 0 0)",
                    "clipPath": "inset(50%)",
                    "height": 1,
                    "margin": "0 -1px -1px 0",
                    "overflow": "hidden",
                    "padding": 0,
                    "position": "absolute",
                    "whiteSpace": "nowrap",
                    "width": 1,
                  }
                }
              >
                <button
                  aria-label="Dismiss"
                  onClick={[Function]}
                  tabIndex={-1}
                />
              </div>
            </VisuallyHidden>
          </DismissButton>
        </div>
      </ModalContainer>
      <span
        data-focus-scope-end={true}
        hidden={true}
      />
    </FocusScope>
  </div>
</MenuTrigger>
`;

exports[`<MenuTrigger /> snapshot should match snapshot with className 1`] = `
<MenuTrigger
  aria-label="Menu Trigger Component "
  className="example-class"
>
  <div
    className="example-class md-menu-trigger-wrapper"
    onKeyDown={[Function]}
  >
    <ButtonPill
      aria-controls={null}
      aria-expanded={false}
      aria-haspopup={true}
      id="test-ID"
      key=".$1"
      onKeyDown={[Function]}
      onPress={[Function]}
      onPressStart={[Function]}
    >
      <ButtonSimple
        aria-controls={null}
        aria-expanded={false}
        aria-haspopup={true}
        className="md-button-pill-wrapper"
        data-color="primary"
        data-disabled={false}
        data-ghost={false}
        data-grown={false}
        data-outline={false}
        data-size={40}
        data-solid={false}
        id="test-ID"
        onKeyDown={[Function]}
        onPress={[Function]}
        onPressStart={[Function]}
      >
        <FocusRing>
          <FocusRing
            focusClass="md-focus-ring-wrapper children"
            focusRingClass="md-focus-ring-wrapper children"
          >
            <button
              aria-controls={null}
              aria-expanded={false}
              aria-haspopup={true}
              className="md-button-pill-wrapper"
              data-color="primary"
              data-disabled={false}
              data-ghost={false}
              data-grown={false}
              data-outline={false}
              data-size={40}
              data-solid={false}
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              type="button"
            >
              Hello world
            </button>
          </FocusRing>
        </FocusRing>
      </ButtonSimple>
    </ButtonPill>
  </div>
</MenuTrigger>
`;

exports[`<MenuTrigger /> snapshot should match snapshot with id 1`] = `
<MenuTrigger
  aria-label="Menu Trigger Component "
  id="example-id"
>
  <div
    className="md-menu-trigger-wrapper"
    id="example-id"
    onKeyDown={[Function]}
  >
    <ButtonPill
      aria-controls={null}
      aria-expanded={false}
      aria-haspopup={true}
      id="test-ID"
      key=".$1"
      onKeyDown={[Function]}
      onPress={[Function]}
      onPressStart={[Function]}
    >
      <ButtonSimple
        aria-controls={null}
        aria-expanded={false}
        aria-haspopup={true}
        className="md-button-pill-wrapper"
        data-color="primary"
        data-disabled={false}
        data-ghost={false}
        data-grown={false}
        data-outline={false}
        data-size={40}
        data-solid={false}
        id="test-ID"
        onKeyDown={[Function]}
        onPress={[Function]}
        onPressStart={[Function]}
      >
        <FocusRing>
          <FocusRing
            focusClass="md-focus-ring-wrapper children"
            focusRingClass="md-focus-ring-wrapper children"
          >
            <button
              aria-controls={null}
              aria-expanded={false}
              aria-haspopup={true}
              className="md-button-pill-wrapper"
              data-color="primary"
              data-disabled={false}
              data-ghost={false}
              data-grown={false}
              data-outline={false}
              data-size={40}
              data-solid={false}
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              type="button"
            >
              Hello world
            </button>
          </FocusRing>
        </FocusRing>
      </ButtonSimple>
    </ButtonPill>
  </div>
</MenuTrigger>
`;

exports[`<MenuTrigger /> snapshot should match snapshot with overlayRadius 1`] = `
<MenuTrigger
  aria-label="Menu Trigger Component "
  defaultOpen={true}
  overlayRadius={75}
>
  <div
    className="md-menu-trigger-wrapper"
    onKeyDown={[Function]}
  >
    <ButtonPill
      aria-controls="test-ID"
      aria-expanded={true}
      aria-haspopup={true}
      id="test-ID"
      key=".$1"
      onKeyDown={[Function]}
      onPress={[Function]}
      onPressStart={[Function]}
    >
      <ButtonSimple
        aria-controls="test-ID"
        aria-expanded={true}
        aria-haspopup={true}
        className="md-button-pill-wrapper"
        data-color="primary"
        data-disabled={false}
        data-ghost={false}
        data-grown={false}
        data-outline={false}
        data-size={40}
        data-solid={false}
        id="test-ID"
        onKeyDown={[Function]}
        onPress={[Function]}
        onPressStart={[Function]}
      >
        <FocusRing>
          <FocusRing
            focusClass="md-focus-ring-wrapper children"
            focusRingClass="md-focus-ring-wrapper children"
          >
            <button
              aria-controls="test-ID"
              aria-expanded={true}
              aria-haspopup={true}
              className="md-button-pill-wrapper"
              data-color="primary"
              data-disabled={false}
              data-ghost={false}
              data-grown={false}
              data-outline={false}
              data-size={40}
              data-solid={false}
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              type="button"
            >
              Hello world
            </button>
          </FocusRing>
        </FocusRing>
      </ButtonSimple>
    </ButtonPill>
    <FocusScope
      contain={true}
      restoreFocus={true}
    >
      <span
        data-focus-scope-start={true}
        hidden={true}
      />
      <ModalContainer
        className="md-menu-trigger-overlay"
        color="primary"
        elevation={4}
        isPadded={true}
        onKeyDown={[Function]}
        round={75}
      >
        <div
          className="md-menu-trigger-overlay md-modal-container-wrapper"
          data-color="primary"
          data-elevation={4}
          data-padded={true}
          data-round={75}
          onKeyDown={[Function]}
        >
          <DismissButton
            onDismiss={[Function]}
          >
            <VisuallyHidden>
              <div
                style={
                  Object {
                    "border": 0,
                    "clip": "rect(0 0 0 0)",
                    "clipPath": "inset(50%)",
                    "height": 1,
                    "margin": "0 -1px -1px 0",
                    "overflow": "hidden",
                    "padding": 0,
                    "position": "absolute",
                    "whiteSpace": "nowrap",
                    "width": 1,
                  }
                }
              >
                <button
                  aria-label="Dismiss"
                  onClick={[Function]}
                  tabIndex={-1}
                />
              </div>
            </VisuallyHidden>
          </DismissButton>
          <_Menu
            key=".$2"
            selectionMode="single"
          >
            <ul
              aria-labelledby="test-ID"
              className="md-menu-wrapper"
              id="test-ID"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyDownCapture={[Function]}
              onMouseDown={[Function]}
              role="menu"
              tabIndex={0}
            >
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 0,
                    "key": "one",
                    "level": 0,
                    "nextKey": "two",
                    "parentKey": null,
                    "prevKey": undefined,
                    "props": Object {
                      "children": "One",
                    },
                    "rendered": "One",
                    "shouldInvalidate": undefined,
                    "textValue": "One",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="one"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": null,
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": null,
                        "isFocused": false,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="one"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="one"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            One
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 1,
                    "key": "two",
                    "level": 0,
                    "nextKey": "three",
                    "parentKey": null,
                    "prevKey": "one",
                    "props": Object {
                      "children": "Two",
                    },
                    "rendered": "Two",
                    "shouldInvalidate": undefined,
                    "textValue": "Two",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="two"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": null,
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": null,
                        "isFocused": false,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="two"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="two"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Two
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 2,
                    "key": "three",
                    "level": 0,
                    "nextKey": undefined,
                    "parentKey": null,
                    "prevKey": "two",
                    "props": Object {
                      "children": "Three",
                    },
                    "rendered": "Three",
                    "shouldInvalidate": undefined,
                    "textValue": "Three",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="three"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "one",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "one" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "one",
                          "level": 0,
                          "nextKey": "two",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "One",
                          },
                          "rendered": "One",
                          "shouldInvalidate": undefined,
                          "textValue": "One",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "two" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "two",
                          "level": 0,
                          "nextKey": "three",
                          "parentKey": null,
                          "prevKey": "one",
                          "props": Object {
                            "children": "Two",
                          },
                          "rendered": "Two",
                          "shouldInvalidate": undefined,
                          "textValue": "Two",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "three" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "three",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "two",
                          "props": Object {
                            "children": "Three",
                          },
                          "rendered": "Three",
                          "shouldInvalidate": undefined,
                          "textValue": "Three",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "three",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "one",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "one" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "one",
                            "level": 0,
                            "nextKey": "two",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "One",
                            },
                            "rendered": "One",
                            "shouldInvalidate": undefined,
                            "textValue": "One",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "two" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "two",
                            "level": 0,
                            "nextKey": "three",
                            "parentKey": null,
                            "prevKey": "one",
                            "props": Object {
                              "children": "Two",
                            },
                            "rendered": "Two",
                            "shouldInvalidate": undefined,
                            "textValue": "Two",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "three" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "three",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "two",
                            "props": Object {
                              "children": "Three",
                            },
                            "rendered": "Three",
                            "shouldInvalidate": undefined,
                            "textValue": "Three",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "three",
                      },
                      "state": Object {
                        "childFocusStrategy": null,
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": null,
                        "isFocused": false,
                        "selectedKeys": Set {},
                        "selectionMode": "single",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="three"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemradio"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="three"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemradio"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Three
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
            </ul>
          </_Menu>
          <ContentSeparator
            key="separator-0"
          >
            <li
              className="md-content-separator-wrapper"
              role="separator"
            />
          </ContentSeparator>
          <_Menu
            key=".$4"
            selectionMode="multiple"
          >
            <ul
              aria-labelledby="test-ID"
              className="md-menu-wrapper"
              id="test-ID"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyDownCapture={[Function]}
              onMouseDown={[Function]}
              role="menu"
              tabIndex={0}
            >
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 0,
                    "key": "asd",
                    "level": 0,
                    "nextKey": "ff",
                    "parentKey": null,
                    "prevKey": undefined,
                    "props": Object {
                      "children": "Four",
                    },
                    "rendered": "Four",
                    "shouldInvalidate": undefined,
                    "textValue": "Four",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="asd"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": null,
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": null,
                        "isFocused": false,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="asd"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="asd"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Four
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 1,
                    "key": "ff",
                    "level": 0,
                    "nextKey": "d",
                    "parentKey": null,
                    "prevKey": "asd",
                    "props": Object {
                      "children": "Five",
                    },
                    "rendered": "Five",
                    "shouldInvalidate": undefined,
                    "textValue": "Five",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="ff"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": null,
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": null,
                        "isFocused": false,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="ff"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="ff"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Five
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
              <MenuItem
                item={
                  Object {
                    "aria-label": undefined,
                    "childNodes": Object {
                      Symbol(Symbol.iterator): [Function],
                    },
                    "hasChildNodes": false,
                    "index": 2,
                    "key": "d",
                    "level": 0,
                    "nextKey": undefined,
                    "parentKey": null,
                    "prevKey": "ff",
                    "props": Object {
                      "children": "Six",
                    },
                    "rendered": "Six",
                    "shouldInvalidate": undefined,
                    "textValue": "Six",
                    "type": "item",
                    "value": undefined,
                    "wrapper": undefined,
                  }
                }
                key="d"
                state={
                  Object {
                    "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                      "firstKey": "asd",
                      "iterable": Object {
                        Symbol(Symbol.iterator): [Function],
                      },
                      "keyMap": Map {
                        "asd" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 0,
                          "key": "asd",
                          "level": 0,
                          "nextKey": "ff",
                          "parentKey": null,
                          "prevKey": undefined,
                          "props": Object {
                            "children": "Four",
                          },
                          "rendered": "Four",
                          "shouldInvalidate": undefined,
                          "textValue": "Four",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "ff" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 1,
                          "key": "ff",
                          "level": 0,
                          "nextKey": "d",
                          "parentKey": null,
                          "prevKey": "asd",
                          "props": Object {
                            "children": "Five",
                          },
                          "rendered": "Five",
                          "shouldInvalidate": undefined,
                          "textValue": "Five",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                        "d" => Object {
                          "aria-label": undefined,
                          "childNodes": Object {
                            Symbol(Symbol.iterator): [Function],
                          },
                          "hasChildNodes": false,
                          "index": 2,
                          "key": "d",
                          "level": 0,
                          "nextKey": undefined,
                          "parentKey": null,
                          "prevKey": "ff",
                          "props": Object {
                            "children": "Six",
                          },
                          "rendered": "Six",
                          "shouldInvalidate": undefined,
                          "textValue": "Six",
                          "type": "item",
                          "value": undefined,
                          "wrapper": undefined,
                        },
                      },
                      "lastKey": "d",
                    },
                    "disabledKeys": Set {},
                    "expandedKeys": Set {},
                    "selectionManager": SelectionManager {
                      "_isSelectAll": null,
                      "allowsCellSelection": false,
                      "collection": $f4c7caecb598119f63e2918a55ec91a9$export$TreeCollection {
                        "firstKey": "asd",
                        "iterable": Object {
                          Symbol(Symbol.iterator): [Function],
                        },
                        "keyMap": Map {
                          "asd" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 0,
                            "key": "asd",
                            "level": 0,
                            "nextKey": "ff",
                            "parentKey": null,
                            "prevKey": undefined,
                            "props": Object {
                              "children": "Four",
                            },
                            "rendered": "Four",
                            "shouldInvalidate": undefined,
                            "textValue": "Four",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "ff" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 1,
                            "key": "ff",
                            "level": 0,
                            "nextKey": "d",
                            "parentKey": null,
                            "prevKey": "asd",
                            "props": Object {
                              "children": "Five",
                            },
                            "rendered": "Five",
                            "shouldInvalidate": undefined,
                            "textValue": "Five",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                          "d" => Object {
                            "aria-label": undefined,
                            "childNodes": Object {
                              Symbol(Symbol.iterator): [Function],
                            },
                            "hasChildNodes": false,
                            "index": 2,
                            "key": "d",
                            "level": 0,
                            "nextKey": undefined,
                            "parentKey": null,
                            "prevKey": "ff",
                            "props": Object {
                              "children": "Six",
                            },
                            "rendered": "Six",
                            "shouldInvalidate": undefined,
                            "textValue": "Six",
                            "type": "item",
                            "value": undefined,
                            "wrapper": undefined,
                          },
                        },
                        "lastKey": "d",
                      },
                      "state": Object {
                        "childFocusStrategy": null,
                        "disabledKeys": Set {},
                        "disallowEmptySelection": undefined,
                        "focusedKey": null,
                        "isFocused": false,
                        "selectedKeys": Set {},
                        "selectionMode": "multiple",
                        "setFocused": [Function],
                        "setFocusedKey": [Function],
                        "setSelectedKeys": [Function],
                      },
                    },
                    "toggleKey": [Function],
                  }
                }
              >
                <ListItemBase
                  aria-checked={false}
                  aria-disabled={false}
                  aria-labelledby={null}
                  className="md-menu-item-wrapper"
                  data-key="d"
                  isDisabled={false}
                  isPadded={true}
                  onClick={[Function]}
                  onDragStart={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseUp={[Function]}
                  onTouchCancel={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  role="menuitemcheckbox"
                  shape="rectangle"
                  size={40}
                  tabIndex={-1}
                >
                  <FocusRing
                    isInset={false}
                  >
                    <FocusRing
                      focusClass="md-focus-ring-wrapper children"
                      focusRingClass="md-focus-ring-wrapper children"
                      isInset={false}
                    >
                      <li
                        aria-checked={false}
                        aria-disabled={false}
                        aria-labelledby={null}
                        className="md-menu-item-wrapper md-list-item-base-wrapper"
                        data-disabled={false}
                        data-interactive={true}
                        data-key="d"
                        data-padded={true}
                        data-shape="rectangle"
                        data-size={40}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragStart={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchCancel={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        role="menuitemcheckbox"
                        tabIndex={-1}
                      >
                        <ListItemBaseSection
                          position="fill"
                        >
                          <div
                            data-position="fill"
                          >
                            Six
                          </div>
                        </ListItemBaseSection>
                      </li>
                    </FocusRing>
                  </FocusRing>
                </ListItemBase>
              </MenuItem>
            </ul>
          </_Menu>
          <DismissButton
            onDismiss={[Function]}
          >
            <VisuallyHidden>
              <div
                style={
                  Object {
                    "border": 0,
                    "clip": "rect(0 0 0 0)",
                    "clipPath": "inset(50%)",
                    "height": 1,
                    "margin": "0 -1px -1px 0",
                    "overflow": "hidden",
                    "padding": 0,
                    "position": "absolute",
                    "whiteSpace": "nowrap",
                    "width": 1,
                  }
                }
              >
                <button
                  aria-label="Dismiss"
                  onClick={[Function]}
                  tabIndex={-1}
                />
              </div>
            </VisuallyHidden>
          </DismissButton>
        </div>
      </ModalContainer>
      <span
        data-focus-scope-end={true}
        hidden={true}
      />
    </FocusScope>
  </div>
</MenuTrigger>
`;

exports[`<MenuTrigger /> snapshot should match snapshot with style 1`] = `
<MenuTrigger
  aria-label="Menu Trigger Component "
  style={
    Object {
      "color": "pink",
    }
  }
>
  <div
    className="md-menu-trigger-wrapper"
    onKeyDown={[Function]}
    style={
      Object {
        "color": "pink",
      }
    }
  >
    <ButtonPill
      aria-controls={null}
      aria-expanded={false}
      aria-haspopup={true}
      id="test-ID"
      key=".$1"
      onKeyDown={[Function]}
      onPress={[Function]}
      onPressStart={[Function]}
    >
      <ButtonSimple
        aria-controls={null}
        aria-expanded={false}
        aria-haspopup={true}
        className="md-button-pill-wrapper"
        data-color="primary"
        data-disabled={false}
        data-ghost={false}
        data-grown={false}
        data-outline={false}
        data-size={40}
        data-solid={false}
        id="test-ID"
        onKeyDown={[Function]}
        onPress={[Function]}
        onPressStart={[Function]}
      >
        <FocusRing>
          <FocusRing
            focusClass="md-focus-ring-wrapper children"
            focusRingClass="md-focus-ring-wrapper children"
          >
            <button
              aria-controls={null}
              aria-expanded={false}
              aria-haspopup={true}
              className="md-button-pill-wrapper"
              data-color="primary"
              data-disabled={false}
              data-ghost={false}
              data-grown={false}
              data-outline={false}
              data-size={40}
              data-solid={false}
              id="test-ID"
              onBlur={[Function]}
              onClick={[Function]}
              onDragStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchCancel={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              type="button"
            >
              Hello world
            </button>
          </FocusRing>
        </FocusRing>
      </ButtonSimple>
    </ButtonPill>
  </div>
</MenuTrigger>
`;
